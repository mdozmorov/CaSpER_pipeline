CNV detection from RNAseq

hg38.fa.gz - "Soft-masked" assembly sequence in one file.

Familiarized myself with command line, cat commands, navigation, directory
#Installed homebrew
xcode-select --install
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

#Set up pyenv, pyenv global, pyenv version, which python (https://opensource.com/article/19/5/python-3-default-mac)
#Updated python to 3.8.2, updated pip to 20.1.1
brew install pyenv 
pyenv install 3.8.2
pyenv global 3.8.2
echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\n  eval "$(pyenv init -)"\nfi' >> ~/.zshrc


#Installed cutadapt 2.10, 
pip install cutadapt

#Downloaded and installed TrimGalore 0.6.5
chmod +x trim_galore
ln -s /path/to/trim_galore /usr/local/bin/trim_galore

# Download .zip of FastQc 0.11.9
# cd to expanded folder
chmod +x fastqc
ln -s /path/to/fastqc /usr/local/bin/fastqc

#Installed STAR (not STARlong), it was already compiled
chmod +x STAR
ln -s /path/to/STAR /usr/local/bin/STAR

Updated R to 4.0
#Updated BioCManager to 3.1.1
if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
BiocManager::install()

#Installing CaSpER dependencies
BiocManager::install(c('HMMcopy', 'GenomeGraphs', 'biomaRt', 'limma', 'GO.db', 'org.Hs.eg.db', 'GOstats'))


#Installed BAFExtract, downloaded .zip
#cd to expanded folder
make BAFExtract
chmod +x BAFExtract
ln -s /path/to/BAFExtract /usr/local/bin/BAFExtract

#collecting list of identifiers in hg38.fa file
cat hg38.fa | grep ">"

#Download samtools 1.10
make
make install
chmod +x samtools
ln -s /path/to/samtools /usr/local/bin/samtools


#compiling list of identifiers
grep ">" hg38.fa | sed 's/>//' > IDs.txt
grep -v -E -- "random|alt|Un" IDs.txt > chr_IDs.txt

#extracting sequences from fasta file based on identifier
samtools faidx hg38.fa `cat chr_IDs.txt` -o hg38test.fa
#moved original hg38 to /Compiled, renamed hg38test.fa to hg38.fa

#Trimming FastQ files with TrimGalore
#Output folder
mkdir 01_trimmed

#For loop to performing trim_galore on all fastq.gz files in current directory
for file in `find . -name "*.fastq.gz" -type f | sort`; do
	trim_galore $file --fastqc -o 01_trimmed/
done

#Generating STAR Index
#cd directory containing genome file, annotation file
STAR --runThreadN 24 --runMode genomeGenerate --genomeDir ./ --genomeFastaFiles hg38.fa --sjdbGTFfile hg38.ensGene.gtf

#crashed on computer, STAR requires at least 30GB of RAM to run
#switched to Windows 10 pC with 32 GB of RAM
#Installed linux bash shell/Windows subsystem for linux (https://www.howtogeek.com/249966/how-to-install-and-use-the-linux-bash-shell-on-windows-10/)
#Installed Ubuntu
sudo apt-get update -y
sudo apt-get install -y rna-star

#transferred hg38.fa and hg38.ensGene.gtf to Windows PC
#explorer.exe . to open WSL in windows
#In directory with genome and genome annotation file
STAR --runThreadN 24 --runMode genomeGenerate --genomeDir ./ --genomeFastaFiles hg38.fa --sjdbGTFfile hg38.ensGene.gtf

#align trimmed FASTQ files to hg38 genome
STAR --genomeDir . --readFilesIn ./00_raw_sample/01_trimmed/DCAF_A_S62_L007_R1_001_trimmed.fq.gz --readFilesCommand zcat --outSAMtype BAM Unsorted --outReadsUnmapped Fastx --quantMode GeneCounts --outFilterMultimapNmax 10 --outFileNamePrefix ./Aligned/DCAF_A_S62_L007_R1_001

#create list of trimmed fastq files
find . -name "*.fq.gz" -type f | sed 's/.//' > input_toSTAR.list


#make list of trimmed fastq files and use as input for STAR aligner
for file in $(find ./00_raw_sample/01_trimmed/ -name "*.fq.gz" -type f | sed s~./00_raw_sample/01_trimmed/~~)
do
	STAR --genomeDir . --readFilesIn ./00_raw_sample/01_trimmed/$file --readFilesCommand zcat --outSAMtype BAM Unsorted --outReadsUnmapped Fastx --quantMode GeneCounts --outFilterMultimapNmax 10 --outFileNamePrefix ./Aligned/$file
done

#testing various syntax for find, for loop and sed
for file in $(find ./00_raw_sample/01_trimmed/ -name "*.fq.gz" -type f | sed s~./00_raw_sample/01_trimmed/~~)
do
	echo "$file"
done

find ./00_raw_sample/01_trimmed/ -name "*.fq.gz" -type f > test.txt

find ./00_raw_sample/01_trimmed/ -name "*.fq.gz" -type f | sed s~./00_raw_sample/01_trimmed/~~ > test.txt

for file in $(cat test.txt)
do
	echo "$file"
done

#install BAFExtract on WSL
#download .zip
#ALWAYS remember / before path!!!!!
make BAFExtract
sudo chmod +x BAFExtract
sudo ln -s /home/smeas/BAFExtract-master/bin/BAFExtract /usr/local/bin

#copy files from WSL to external drive D 
cp -avr ./RNASeq /mnt/d/ 

#install R for Windows10
#install RStudio
#Install Rtools, follow instructions
dependencies = TRUE, INSTALL_opts = '--no-lock'
#backports dependency for devtools had trouble installing, had to 'unlock' folder
install.packages("backports", dependencies = TRUE, INSTALL_opts = '--no-lock')


#perform BAFExtract to create genome_fasta_pileup_dir, creates an index of each indivdual chromosome eg 1.bin, 16.bin, M.bin, X.bin
BAFExtract -preprocess_FASTA ./RNASeq/hg38.fa ./RNASeq/genome_fasta_pileup  

#installed UCSC genome browser 'kent' bioinformatic utilities (https://genome-source.gi.ucsc.edu/gitlist/kent.git/blob/master/src/userApps/README)
 rsync -a -P rsync://hgdownload.soe.ucsc.edu/genome/admin/exe/linux.x86_64/ ./kentUtils

#gathering size of chromosomes
fetchChromSizes ./hg38.fa > hg38.list 

#filtering out alt, random and Un
grep -v -E -- "random|alt|Un" hg38test.list > hg38.list

#perform BAFExtract on file
#output folder
DIROUT=04_BAFExtract

for file in $(find /home/smeas/RNASeq/03_aligned -type f -name "*Aligned.out.bam")
do
	bam_file=$file;
	output_baf_file=$DIROUT"/"`basename $file _001_trimmed.fq.gzAligned.out.bam`".snp";
	samtools view $bam_file | BAFExtract -generate_compressed_pileup_per_SAM stdin /home/smeas/RNASeq/hg38.list /home/smeas/RNASeq/$DIROUT 50 0;
	BAFExtract -get_SNVs_per_pileup /home/smeas/RNASeq/hg38.list /home/smeas/RNASeq/$DIROUT /home/smeas/RNASeq/genome_fasta_pileup 20 4 0.1 /home/smeas/RNASeq/$output_baf_file;
done

#Loading STAR *ReadsperGene.out.tab in RStudio
dataset1 <- read.table("C:/Users/steve/Documents/03_aligned/DCAF_A_S62_L007_R1_001_trimmed.fq.gzReadsPerGene.out.tab",sep="\t", skip = 4, header = F)

dataset2 <- read.table("C:/Users/steve/Documents/03_aligned/GFP_A_S57_L007_R1_001_trimmed.fq.gzReadsPerGene.out.tab",sep="\t", skip = 4, header = F)

dataset3 <- read.table("C:/Users/steve/Documents/03_aligned/KO_DCAF_A_S72_L007_R1_001_trimmed.fq.gzReadsPerGene.out.tab",sep="\t", skip = 4, header = F)

dataset4 <- read.table("C:/Users/steve/Documents/03_aligned/KO_GFP_A_S67_L007_R1_001_trimmed.fq.gzReadsPerGene.out.tab",sep="\t", skip = 4, header = F)

#to print selection from a datatable in R
mydata$V1[1:x]
mydata[1:x,1:y]

#counts in each column, V1 - genes, V2 - non-stranded, V3 - positive, V4 - negative
#Hence should select V4 with most counts
DCAF
sum(mydata$V2) = 7586
sum(mydata$V3) = 370
sum(mydata$V4) = 7825
GFP
sum(mydata$V2) = 7455
sum(mydata$V3) = 379
sum(mydata$V4) = 7731
KO_DCAF
sum(mydata$V2) = 7516
sum(mydata$V3) = 352
sum(mydata$V4) = 7776
KO_GFP
sum(mydata$V2) = 7382
sum(mydata$V3) = 401
sum(mydata$V4) = 7660

#creating a new dataframe out of these samples
newdata <- data.frame(dataset1$V1,dataset1$V4,dataset2$V4,dataset3$V4,dataset4$V4)

#setting row names as genes
rownames(newdata) <- newdata$dataset1.V1
newdata$dataset1.V1 <- NULL

#setting column names as samples
colnames(newdata) <- c("DCAF_A_S62_L007_R1", "GFP_A_S57_L007_R1", "KO_DCAF_A_S72_L007_R1", "KO_GFP_A_S67_L007_R1")

#writing new dataframe to file
write.table(newdata, "C:/Users/steve/Documents/readsoutpergene_sum.tab", sep="\t")  

#HG38 cytoband creation
#download from http://hgdownload.cse.ucsc.edu/goldenPath/hg38/database/cytoBand.txt.gz
#perform the following
cytoband <- read.delim("cytoBand.txt", header=F)
cytoband <- data.frame(V1=gsub("chr", "", cytoband[,1]), V2=cytoband[,2], V3=cytoband[,3], V4=substring(cytoband$V4, 1, 1), stringsAsFactors=F)
start <- do.call(rbind, lapply(split(cytoband$V2, paste0(cytoband$V1, cytoband$V4)), min))
end <- do.call(rbind, lapply(split(cytoband$V3, paste0(cytoband$V1, cytoband$V4)), max))
cytoband <- data.frame(V1=gsub("p", "", gsub("q", "", rownames(start))), V2=start, V3=end, V4=rownames(start), stringsAsFactors=F)
cytoband <- cytoband [as.vector(unlist(sapply(c(1:22, "X"), function(x) which(cytoband$V1 %in% x)))), ]
cytoband$V4[grep("q", cytoband$V4)] <- "q"
cytoband$V4[grep("p", cytoband$V4)] <- "p"
rownames(cytoband) <- NULL

#writing cytoband to file
write.table(cytoband, "C:/Users/steve/Documents/cytoband.tab", sep="\t")  

#downloading centromere information
curl -s "http://hgdownload.cse.ucsc.edu/goldenPath/hg38/database/cytoBand.txt.gz" | gunzip -c | grep acen > centromere.tab
cp centromere.tab /mnt/c/Users/steve/Documents

#loading centromere information
centromere <- read.delim("centromere.tab", header=F)

#creating annotation date
annotation <- generateAnnotation(id_type="ensembl_gene_id", genes=rownames(newdata), ishg19=T, centromere, host="uswest.ensembl.org")

#reading BAFExtractoutput
loh <- readBAFExtractOutput(path="./04_BAFExtract\\", sequencing.type="bulk")
names(loh) <- gsub(".snp", "", names(loh))

#create loh.name.mapping, this is just a file to match loh.name with sample name, if different
loh.name.mapping <- data.frame("loh.name" = c("DCAF_A_S62_L007_R1", "GFP_A_S57_L007_R1", "KO_DCAF_A_S72_L007_R1", "KO_GFP_A_S67_L007_R1"), "sample.name" = c("DCAF_A_S62_L007_R1", "GFP_A_S57_L007_R1", "KO_DCAF_A_S72_L007_R1", "KO_GFP_A_S67_L007_R1"))

#making control.sample.ids, just a list of control samples
control.sample.ids = c("DCAF_A_S62_L007_R1","GFP_A_S57_L007_R1")

#there is a discrepancy between number of genes in annotation and in newdata
#removes genes in newdata that are not present in annotation
gene1=rownames(newdata)
gene2=rownames(annotation)
gene3=intersect(gene1,gene2)
gene2=annotation$Gene
gene3=intersect(gene1,gene2)
newdata1=newdata[rownames(newdata) %in% gene3,]
newdata2=newdata1[match(annotation$Gene,rownames(newdata1)),]

#testing that number of genes are exactly the same in annotation and newdata2
all.equal(rownames(newdata2),annotation$Gene)

#creating casper object
object <- CreateCasperObject(raw.data=newdata2, loh.name.mapping=loh.name.mapping, sequencing.type="bulk", 
  cnv.scale=3, loh.scale=3, matrix.type="normalized", expr.cutoff=4.5,
  annotation=annotation, method="iterative", loh=loh, filter="median",  
  control.sample.ids=control.sample.ids, cytoband=cytoband, genomeVersion= "hg38")
  
final.objects <- runCaSpER(object, removeCentromere=T, cytoband=cytoband, method="iterative")

#large-scale CNV summarization
finalChrMat <- extractLargeScaleEvents (final.objects, thr=0.75) 

#segment based CNV summarization
gamma <- 6
all.segments <- do.call(rbind, lapply(final.objects, function(x) x@segments))
segment.summary <- extractSegmentSummary (final.objects)
loss <- segment.summary$all.summary.loss
gain <- segment.summary$all.summary.gain
loh <- segment.summary$all.summary.loh
loss.final <- loss[loss$count>gamma, ]
gain.final <- gain[gain$count>gamma, ]
loh.final <- loh[loh$count>gamma, ]

#gene based CNV summarization
   
all.summary<- rbind(loss.final, gain.final)
colnames(all.summary) [2:4] <- c("Chromosome", "Start",   "End")
geno.rna <-  GRanges(seqnames = Rle(gsub("q", "", gsub("p", "", all.summary$Chromosome))), 
    IRanges(all.summary$Start, all.summary$End))   
ann.gr <- makeGRangesFromDataFrame(final.objects[[1]]@annotation.filt, keep.extra.columns = TRUE, seqnames.field="Chr")
hits <- findOverlaps(geno.rna, ann.gr)
genes <- splitByOverlap(ann.gr, geno.rna, "GeneSymbol")
genes.ann <- lapply(genes, function(x) x[!(x=="")])
all.genes <- unique(final.objects[[1]]@annotation.filt[,2])
all.samples <- unique(as.character(final.objects[[1]]@segments$ID))
rna.matrix <- gene.matrix(seg=all.summary, all.genes=all.genes, all.samples=all.samples, genes.ann=genes.ann)

#generating plotHeatmap
#only_soi = F will include control samples
obj <- final.objects[[9]]
plotHeatmap(object=obj, fileName="heatmap.png",cnv.scale= 3, cluster_cols = F, cluster_rows = T, show_rownames = T, only_soi = T)

#plot large scale events
plotLargeScaleEvent (object=obj, fileName="large.scale.events.png") 



